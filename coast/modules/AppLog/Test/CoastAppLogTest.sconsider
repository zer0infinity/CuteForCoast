# vim: set et ai ts=4 sw=4:
# -------------------------------------------------------------------------
# Copyright (c) 2010, Peter Sommerlad and IFS Institute for Software
# at HSR Rapperswil, Switzerland
# All rights reserved.
#
# This library/application is free software; you can redistribute and/or
# modify it under the terms of the license that is included with this
# library/application in the file license.txt.
# -------------------------------------------------------------------------

import pkg_resources
pkg_resources.require(["SConsider"])
import SConsider
import os
import fnmatch
import shutil
from stat import *

Import('*')

searchReplace = {
    "LOGDIR": lambda env: env.getTargetBaseInstallDir().Dir('tmp').abspath,
    "ROTATEDIR": lambda env: env.getTargetBaseInstallDir().Dir('tmp').abspath,
}


def setUp(target, source, env):
    env['ENV']['COAST_USE_MMAP_STREAMS'] = "0"
    targetDir = env.getTargetBaseInstallDir()
    tmppath = targetDir.Dir('tmp').abspath
    for d in [tmppath, targetDir.Dir(os.path.join('config', 'rotate')).abspath]:
        if os.path.isdir(d):
            shutil.rmtree(d)
        try:
            os.makedirs(d)
        except oserror:
            pass


def tearDown(target, source, env):
    dir = env.getTargetBaseInstallDir().Dir('config')
    for root, dirs, files in os.walk(dir.abspath):
        for f in files:
            if fnmatch.fnmatch(f, '*.log*'):
                os.unlink(os.path.join(root, f))

_sconsider_dist = pkg_resources.get_distribution("SConsider").parsed_version
if _sconsider_dist < pkg_resources.parse_version("0.5.dev"):
    buildSettings = {
        packagename: {
            'linkDependencies': [
                'CoastAppLog',
                'testfwWDBase'],
            'sourceFiles': SConsider.listFiles(
                ['*.cpp']),
            'targetType': 'ProgramTest',
            'copyFiles': [
                (SConsider.listFiles(
                    ['config/*.any']),
                 S_IRUSR | S_IRGRP | S_IROTH,
                 searchReplace),
            ],
            'runConfig': {
                'setUp': setUp,
                'tearDown': tearDown,
            },
        },
    }

    SConsider.createTargets(packagename, buildSettings)
