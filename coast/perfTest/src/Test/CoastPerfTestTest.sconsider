# vim: set et ai ts=4 sw=4:
# -------------------------------------------------------------------------
# Copyright (c) 2010, Peter Sommerlad and IFS Institute for Software
# at HSR Rapperswil, Switzerland
# All rights reserved.
#
# This library/application is free software; you can redistribute and/or
# modify it under the terms of the license that is included with this
# library/application in the file license.txt.
# -------------------------------------------------------------------------

import pkg_resources
pkg_resources.require(["SConsider"])
import SConsider
import Anything
import os
import socket
import re
import threading
import shutil
from stat import *
import ServerExtensions
from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler
from SimpleHTTPServer import SimpleHTTPRequestHandler

Import('*')

defaults = None


class MyHTTPServer(HTTPServer):

    """This class wrapper is needed to set allow_reuse_address to True
    prior to initializing it"""
    allow_reuse_address = True

servers = []


def startServer(host, port, server_class, handler_class, **kw):
    server = server_class((host, port), handler_class, **kw)
    servers.append(server)
    server.serve_forever()


def setUp(target, source, env):
    tdir = env.getTargetBaseInstallDir()
    Anything.setLocalEnv(env={}, COAST_ROOT=tdir.abspath)

    global defaults
    try:
        defaults = Anything.loadFromFile('Defaults.any')
    except IOError:
        pass

    tdirabs = tdir.abspath
    logpath = env.getLogInstallDir()
    configdir = tdir.Dir('config')
    threading.Thread(
        target=startServer,
        args=[
            defaults['HostName'],
            defaults['HttpPort'],
            MyHTTPServer,
            SimpleHTTPRequestHandler]).start()


def tearDown(target, source, env):
    for server in servers:
        server.shutdown()
    # delete generated files
    SConsider.removeFiles(
        SConsider.findFiles(
            [env.getTargetBaseInstallDir().Dir('config')],
            extensions=[],
            matchfiles=['time.txt']))


_sconsider_dist = pkg_resources.get_distribution("SConsider").parsed_version
if _sconsider_dist < pkg_resources.parse_version("0.5.dev"):
    buildSettings = {
        packagename: {
            'targetType': 'LibraryShared',
            'sourceFiles': SConsider.listFiles(['*.cpp']),
            'includeSubdir': '',
            'linkDependencies': [
                'testfwWDBase',
                'CoastPerfTest',
            ],
        },
        'Runner': {
            'targetType': 'ProgramTest',
            'requires': [
                packagename + '.' + packagename,
                'CoastStdDataAccess',
                'CoastActions',
                'CoastRenderers',
            ],
            'usedTarget': 'coastd.coastd',
            'copyFiles': [
                (SConsider.findFiles(['.'], ['.txt', '.html']),
                 S_IRUSR | S_IRGRP | S_IROTH),
                (SConsider.findFiles(['config'], ['.any']),
                 S_IRUSR | S_IRGRP | S_IROTH),
            ],
            'runConfig': {
                'setUp': setUp,
                'tearDown': tearDown,
            },
        },
    }

    SConsider.createTargets(packagename, buildSettings)
