"""
The master build SConstruct file. This pulls in everything else and makes
things happen.
"""

import os
import ConfigParser
import shutil
import build_config

env = Environment(ENV = os.environ)
env = SConscript('auxiliary/SConscript', 'env')


class LatexBuilder(object):
    """To facilitate the build of "complex" LaTeX documents."""

    def __init__(self, latex_project):
        """Constructor. Takes the LaTeX main file as input."""
        self.latex_project = latex_project
        self.chapters = []
        self.figures = {}
        self.pdf_output = None
        self.dvi_output = None
        self.makeindex_file_list = [self.latex_project + x
                                    for x in build_config.MAKEINDEX_EXTENSIONS]

        self.figures = {'eps': [],
                        'pdf': [],
                        'png': [],
                        'jpg': [],
                        'gnuplot': [],
                        'dot': [],
                        'msc': []}

        self._get_chapters()
        self._collect_figures_from_dirs()
        

    def _get_chapters(self):
        """Colect chapter names."""
        chapter_finder = os.path.join(build_config.CHAPTER_DIRECTORY,
                                      '*.tex')
        self.chapters = [os.path.split(x)[-1][:-4]
                         for x in Glob(chapter_finder, strings=True)]
    
    
    def build_config(self):
        """Configure the two build targets for DVI and PDF output."""
        self.dvi_output = env.DVI(source=self.latex_project + '.tex',
                                  target=self.latex_project + '.dvi')
        env.Alias('dvi', self.latex_project + '.dvi')
        Clean(self.dvi_output, self.makeindex_file_list)
        
        self.pdf_output = env.PDF(source=self.latex_project + '.tex',
                                  target=self.latex_project + '.pdf')
        env.Alias('pdf', self.latex_project + '.pdf')
        env.Clean(self.pdf_output, self.makeindex_file_list)
        
        env.Default(build_config.DEFAULT_TARGET)


    def _find_files(self, chapter, extension):
        """Find all files with a certain extension for a given chapter."""
        find_pattern = os.path.join(build_config.IMAGES_DIRECTORY,
                                    chapter, '*%s' % extension)
        found_files = Glob(find_pattern, strings=True)
        # Strip off the extensions.
        length_extension = len(extension)
        found_files = [x[x.index(os.sep) + 1:-length_extension]
                       for x in found_files]
        return found_files
    
    
    def _collect_figures_from_dirs(self):
        """Find all figures in the modules and add them to my list."""
        for chapter in self.chapters:
            for extension in ['eps', 'pdf', 'png', 'jpg', 'gnuplot', 'dot', 'msc']:
                new_files = self._find_files(chapter,
                                             build_config.FILE_EXTENSIONS[extension])
                self.figures[extension].extend(new_files)


    def _build_gnuplot(self, gnuplot_figures):
        """Build GNUplot figures."""
        for item in gnuplot_figures:
            gnuplot_file = os.path.join(build_config.IMAGES_DIRECTORY,
                                        item + build_config.FILE_EXTENSIONS['gnuplot'])
            eps_file = os.path.join(build_config.GENERATED_DIRECTORY,
                                    item + build_config.FILE_EXTENSIONS['eps'])
            pdf_file = os.path.join(build_config.GENERATED_DIRECTORY,
                                    item + build_config.FILE_EXTENSIONS['pdf'])
            env.Gnuplot(source=gnuplot_file, target=eps_file)
            dep = env.Eps2pdf(source=eps_file, target=pdf_file)
            env.Depends(dep, eps_file)
            env.Depends(self.dvi_output, eps_file)
            env.Depends(self.pdf_output, pdf_file)


    def _build_png(self, png_figures):
        """Build PNG2EPS targets."""
        for item in png_figures:
            png_file = os.path.join(build_config.IMAGES_DIRECTORY,
                                    item + build_config.FILE_EXTENSIONS['png'])
            eps_file = os.path.join(build_config.GENERATED_DIRECTORY,
                                    item + build_config.FILE_EXTENSIONS['eps'])
            env.Png2eps(eps_file, png_file)
            env.Depends(self.dvi_output, eps_file)


    def _build_jpg(self, jpg_figures):
        """Build JPG2EPS targets."""
        for item in jpg_figures:
            jpg_file = os.path.join(build_config.IMAGES_DIRECTORY,
                                    item + build_config.FILE_EXTENSIONS['jpg'])
            eps_file = os.path.join(build_config.GENERATED_DIRECTORY,
                                    item + build_config.FILE_EXTENSIONS['eps'])
            env.Jpg2eps(eps_file, jpg_file)
            env.Depends(self.dvi_output, eps_file)


    def _build_pdf(self, pdf_figures):
        """Build PDF2EPS targets."""
        for item in pdf_figures:
            eps_file = os.path.join(build_config.GENERATED_DIRECTORY,
                                    item + build_config.FILE_EXTENSIONS['eps'])
            pdf_file = os.path.join(build_config.IMAGES_DIRECTORY,
                                    item + build_config.FILE_EXTENSIONS['pdf'])
            env.Pdf2eps(eps_file, pdf_file)
            env.Depends(self.dvi_output, eps_file)


    def _build_eps(self, eps_figures):
        """Build EPS2PDF targets."""
        for item in eps_figures:
            eps_file = os.path.join(build_config.IMAGES_DIRECTORY,
                                    item + build_config.FILE_EXTENSIONS['eps'])
            pdf_file = os.path.join(build_config.GENERATED_DIRECTORY,
                                    item + build_config.FILE_EXTENSIONS['pdf'])
            env.Eps2pdf(pdf_file, eps_file)
            env.Depends(self.pdf_output, pdf_file)


    def _build_dot(self, dot_figures):
        """Build Graphviz dot figures."""
        for item in dot_figures:
            dot_file = os.path.join(build_config.IMAGES_DIRECTORY,
                                        item + build_config.FILE_EXTENSIONS['dot'])
            png_file = os.path.join(build_config.GENERATED_DIRECTORY,
                                    item + build_config.FILE_EXTENSIONS['png'])          
            env.Dot(source=dot_file, target=png_file)
            env.Depends(self.pdf_output, png_file)


    def _build_msc(self, msc_figures):
        """Build MscGen figures."""
        for item in msc_figures:
            msc_file = os.path.join(build_config.IMAGES_DIRECTORY,
                                        item + build_config.FILE_EXTENSIONS['msc'])
            png_file = os.path.join(build_config.GENERATED_DIRECTORY,
                                    item + build_config.FILE_EXTENSIONS['png'])          
            env.Msc(source=msc_file, target=png_file)
            env.Depends(self.pdf_output, png_file)


    def build_figures(self):
        """Build all figures according to dependencies."""
        self._build_gnuplot(self.figures['gnuplot'])
        self._build_png(self.figures['png'])
        self._build_jpg(self.figures['jpg'])
        self._build_pdf(self.figures['pdf'])
        self._build_eps(self.figures['eps'])
        self._build_dot(self.figures['dot'])
        self._build_msc(self.figures['msc'])


def copy_images(baseoutdir):
    """Copies all images needed for the documentation of the COAST project.
    Every image is copied according to the configuration file into the image 
    directory of the corresponding chapter number.
    """

    config = ConfigParser.ConfigParser()
    config.optionxform = str # makes sure option names are delivered case sensitive
    config.read("auxiliary/img_mappings.cfg")

    for chapter in config.sections():
        for mapping in config.options(chapter):
            img_src_file = os.path.join(baseoutdir, mapping)
            img_dest_suffix = config.get(chapter, mapping) if config.has_option(chapter, mapping) \
                              else os.path.basename(img_src_file)
            img_dest_file = os.path.join(build_config.IMAGES_DIRECTORY, chapter, img_dest_suffix)

            if os.path.exists(img_src_file):
                shutil.copy(img_src_file, img_dest_file)
            else:
                print "Warning: File %s does not exist!" % img_src_file


def build(baseoutdir):
    """Do the magic of building the LaTeX document."""
    
    # Set LaTeX options
    env['LATEXRETRIES'] = 4
    env['PDFLATEXFLAGS'] = ['-interaction=nonstopmode','-shell-escape']

    copy_images(baseoutdir)
    builder = LatexBuilder(build_config.LATEX_PROJECT)
    builder.build_config()
    builder.build_figures()

import SCons
from SCons.Script import AddOption, Dir, GetOption, Flatten
AddOption('--baseoutdir', dest='baseoutdir', action='store', nargs=1, type='string', default='..', metavar='DIR', help='Directory containing packages superseding installed ones. Relative paths not supported!')
baseoutdir = Dir(GetOption('baseoutdir'))
print 'base output dir [%s]' % baseoutdir.abspath
build(baseoutdir.abspath)
